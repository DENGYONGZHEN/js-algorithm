/***
 * Binary Search（二分查找） 是一种高效的查找算法，常用于在一个已经排序的数组或列表中快速定位目标值。
 * 工作原理：
 * 初始设置: 首先确定数组的中间元素。
 * 比较目标值:
 * 如果目标值等于中间元素，查找成功，返回该元素的位置。
 * 如果目标值小于中间元素，则目标值必定在左半部分。继续在左半部分重复上述步骤。
 * 如果目标值大于中间元素，则目标值必定在右半部分。继续在右半部分重复上述步骤。
 * 递归或迭代: 不断将查找范围缩小一半，直到找到目标值，或者查找范围为空（表示目标值不在数组中）。
 * 复杂度：
 * 时间复杂度:
 * 𝑂(log⁡𝑛)   𝑛 是数组的长度。这意味着即使数据量很大，二分查找也能很快找到目标值。
 * 举例：
 * 假设有一个排序好的数组 [1, 3, 5, 7, 9]，如果要查找数字 7，二分查找的步骤如下：
 * 查找中间元素（5）。
 * 7 大于 5，所以查找右半部分 [7, 9]。
 * 7 等于新的中间元素（7），查找成功。
 */

const sort = (arr) => {
  const result = [arr[0]];
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr.length; j++) {
      if (arr[j] < result[i]) {
        result[i] = arr[j];
      }
    }
  }
};
